services:
  db:
    image: postgres:latest
    container_name: eventumdb
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=eventumdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eventumdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1g

  web:
    build: .
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:password@db:5432/eventumdb
      - FLASK_APP=run.py
      - FLASK_ENV=development  # Enables debug mode
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # This command runs when the container starts:
    # 1. It waits for the database to be ready
    # 2. It runs 'flask db upgrade' (which applies all migrations if the db is new in the computer).
    # 3. It starts the Flask server.
    command: >
      sh -c "
        echo 'Iniciando, aguarde... pode demorar at√© 10s...'
        
        # Simple loop to wait for postgres
        while ! nc -z db 5432; do
          echo 'Waiting for Postgres...'
          sleep 1;
        done;
        
        echo 'Postgres is up. Running migrations...'
        cd /app/backend && python3 -m flask db upgrade
        
        echo 'Starting Flask app...'
        cd /app/backend && python3 run.py
      "
    deploy:
      resources:
        limits:
          memory: 1g

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      web:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/vite.config.js:/app/vite.config.js
    command: npm run dev -- --host 0.0.0.0
    deploy:
      resources:
        limits:
          memory: 1g

volumes:
  postgres_data: